#!/usr/bin/python

# ===========================================================================
# 10 degree of freedom daemon
#
# Interfaces to the GY-80 10DOF board, and an external GPS to log
#   the sensors into an XML file
#
# Note that this program does NOT write out the ending </imu> as that
#   will need to be done manually once the payload has been retrieved
#
# To create and use the MySQL database, run the following commands:
# CREATE DATABASE balloon;
# USE balloon;
#
# To create the MySQL table within the database, run the following command:
# CREATE TABLE dataDupTest (time DATETIME, lat FLOAT, lon FLOAT, alt INT, timeg DATETIME, ax DOUBLE, ay DOUBLE, az DOUBLE, roll INT, pitch INT, mx DOUBLE, my DOUBLE, mz DOUBLE, mxh INT, myh INT, mzh INT, gx DOUBLE, gy DOUBLE, gz DOUBLE, tempg INT, press INT, altp INT, tempp INT);
#
# The code below is written to use the 'root' MySQL user and the
# password 'bubbles'.
# ===========================================================================

import os
import time
import sys

import random			 # For testing without the 10DOF sensor board
import MySQLdb as mdb            # MySQL Python module

from GPS      import GPS         # GPS lat/long/altitude/time
from ADXL345  import ADXL345     # accelerometer
from BMP085   import BMP085      # pressure + temp
from HMC5883  import HMC5883     # magnetometer (compass) + temp
from L3G4200D import L3G4200D    # gyroscope

# Simple printable timestamp of the current time
def timestamp():
   return time.strftime('%x %X %z')

# Timestamp formatted for MySQL
def dbtimestamp():
   return time.strftime('%Y-%m-%d %H:%M:%S')

os.environ['TZ'] = "EST"

# Initialize the sensor libraries
gps      = GPS()
acc      = ADXL345()
pressure = BMP085()
compass  = HMC5883()
gyro     = L3G4200D()

# Initialize the MySQL connection variable
con = None

# Inintialize the random number generator used for testing without the 10DOF board
random.seed()

# Print out XML file header
print "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"
print
print "<imu version=\"0.1\">"
print "   <metadata>"
print "      <text>Generated by the NCNS 10DOF sensor setup</text>"
print "      <time>%s</time>" % timestamp()
print "   </metadata>"

# Run forever - this means that it will never stop and will never
#   write out the </imu> tag at the end. Perhaps this will be
#   improved in the future with a power off method that will 
#   write out the ending tag, sync and close the files
while True:

   # Get the GPS sensor data
   latlon = [random.uniform(77,78), random.uniform(34,35)] #gps.readLatLong()
   altG   = random.randint(0,60000) #gps.readAltitude()
   timeG  = dbtimestamp() #gps.readTimestamp()

   # Get the accelerometer sensor data
   XYZa   = [random.uniform(-100,100), random.uniform(-100,100), random.uniform(-100,100)] #acc.readAccelerometer()
   roll   = random.randint(0,360) #acc.computeRoll(XYZa)
   pitch  = random.randint(0,360) #acc.computePitch(XYZa)

   # Get the compass sensor data
   XYZm  = [random.uniform(0,360), random.uniform(0,360), random.uniform(0,360)] #compass.readCompass()
   XYZmh = [random.uniform(0,360), random.uniform(0,360), random.uniform(0,360)] #compass.heading(XYZm)

   # Get the gyroscope sensor data
   XYZr  = [random.uniform(0,360), random.uniform(0,360), random.uniform(0,360)] #gyro.readGyro()
   tempG = random.randint(-100,150) #gyro.readTemperature()

   # Get the pressure sensor data
   press = random.randint(0,100) #pressure.readPressure()
   altP  = random.randint(0,60000) #pressure.readAltitude()
   tempP = random.randint(-100,150) #pressure.readTemperature()

   # Insert the data into the MySQL database for retrieval by the web dashboard
   try:
      con = mdb.connect('localhost', 'root', 'bubbles', 'balloon');
      cur = con.cursor()
      cur.execute('INSERT INTO data VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)', (dbtimestamp(),latlon[0],latlon[1],altG,timeG,XYZa[0],XYZa[1],XYZa[2],roll,pitch,XYZm[0],XYZm[1],XYZm[2],XYZmh[0],XYZmh[1],XYZmh[2],XYZr[0],XYZr[1],XYZr[2],tempG,press,altP,tempP))
      con.commit()

   except mdb.Error, e:
       print "Error %d: %s" % (e.args[0],e.args[1])
       sys.exit(1)

   finally:
       if con:
          con.close()

   # Now write out the .xml datapoint record. This is done all
   #   at the end to attempt to minimize the amount of time 
   #   delta between the reading of the sensor data above

   print
   print "<datapoint>"
   print "   <time>%s</time>" % timestamp()
   print "   <gps>"
   print "      <lat>%g</lat>" % latlon[0]
   print "      <lon>%g</lon>" % latlon[1]
   print "      <alt>%d</alt>" % altG
   print "      <time>%s</time>" % timeG
   print "   </gps>"

   print "   <accelerometer>"
   print "      <x>%g</x>" % XYZa[0]
   print "      <y>%g</y>" % XYZa[1]
   print "      <z>%g</z>" % XYZa[2]
   print "      <roll>%g</roll>" % roll
   print "      <pitch>%g</pitch>" % pitch
   print "   </accelerometer>"

   print "   <magnetometer>"
   print "      <x>%g</x>" % XYZm[0]
   print "      <y>%g</y>" % XYZm[1]
   print "      <z>%g</z>" % XYZm[2]
   print "      <xh>%g</xh>" % XYZmh[0]
   print "      <yh>%g</yh>" % XYZmh[1]
   print "      <zh>%g</zh>" % XYZmh[2]
   print "   </magnetometer>"

   print "   <gyroscope>"
   print "      <x>%g</x>" % XYZr[0]
   print "      <y>%g</y>" % XYZr[1]
   print "      <z>%g</z>" % XYZr[2]
   print "      <temp>%d</temp>" % tempG
   print "   </gyroscope>"

   print "   <pressure>"
   print "      <p>%d</p>" % press
   print "      <alt>%d</alt>" % altP
   print "      <temp>%d</temp>" % tempP
   print "   </pressure>"

   print "</datapoint>"

   # Flush, and wait for the next sample period
   sys.stdout.flush()
   time.sleep(60)
